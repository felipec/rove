#!/usr/bin/env ruby

require 'etc'

JOBS = Etc.nprocessors

$tests = ARGV
$failed = []
$jobs = {}

def run(test)
  path = File.absolute_path(test)
  pid = Process.spawn(path, out: '/dev/null')
  $jobs[pid] = test
end

def red(v)
  "\e[1;31m%s\e[m" % v
end

$max_length = $tests.map(&:length).max

$fmts = { true => '%s ok', false => red('%s fail') }

$tests.pop(JOBS).each { |e| run(e) }

until $jobs.empty?
  pid, status = Process.wait2()
  test = $jobs[pid]
  dots = ' ' + '.' * ($max_length + 2 - test.length)
  puts $fmts[status.success?] % [test + dots]
  $failed << test unless status.success?
  $jobs.delete(pid)

  next_test = $tests.pop
  run(next_test) if next_test
end

puts "\n# Failed tests:" unless $failed.empty?
$failed.each do |test|
  puts red(test)
end

exit $failed.empty?
